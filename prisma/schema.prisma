// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum CollectionStatus {
  PUBLIC
  PRIVATE
}

enum CollectibleStatus {
  ACQUIRED
  PLANNED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String?
  username          String?           @unique
  description       String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  collections       Collection[]
  backgroundColorId String?                
  backgroundColor   BackgroundColors? @relation(fields: [backgroundColorId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id          String           @id @default(cuid())
  name        String
  description String
  items       Collectible[]
  status      CollectionStatus
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now()) @updatedAt
}

model BackgroundColors {
  id        String @id @default(cuid())
  name      String
  colorCode String
  users     User[]
}

model Collectible {
  id           String            @id @default(cuid())
  name         String
  description  String
  collectionId String
  status       CollectibleStatus
  dragPosition Int
  collection   Collection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  created_at   DateTime?         @default(now())
  updated_at   DateTime?         @default(now()) @updatedAt
}


